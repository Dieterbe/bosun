tsdbHost = ny-devtsdb04.ds.stackexchange.com:4242
smtpHost = ny-mail.ds.stackexchange.com:25
httpListen = :80

template generic {
	body = `Alert definition:
	Name: {{.Alert.Name}}
	Crit: {{.Alert.Crit}}

	Tags:{{range $k, $v := .Tags}}
	{{$k}}: {{$v}}{{end}}
	`
	subject = {{.Alert.Name}}: {{.Alert.Vars.q | .E}} on {{.Tags.host}}
}

alert linux.cpu {
	#High CPU Percentage on Any Linux Host
	owner = kyle@stackoverflow.com
	template = generic
	$time = "1m"
	$q = (1 - (avg(q("sum:rate:linux.cpu{host=*,type=idle}", $time))/avg(q("sum:rate:linux.cpu{host=*}", $time)) )) * 100
	crit = $q > 60
	warn = $q > 80
}

alert linux.cpu.missing {
	##This is a bit strange, since the way to check for the precense of all type tags with "host=*" is to add type=*
	owner = kyle@stackoverflow.com
	template = generic
	$m1 = since(q("sum:rate:linux.cpu{host=*,type=idle}", "1h"))
	$m2 = since(q("sum:rate:linux.cpu{host=*,type=*}", "1h"))
	warn = $m1 > 60 || $m2 > 60
}

alert linux.mem {
	owner = kyle@stackoverflow.com
	template = generic
	$q = (avg(q("avg:linux.mem.memfree{host=*}", "1m")) + avg(q("avg:linux.mem.buffers{host=*}", "1m")) + avg(q("avg:linux.mem.cached{host=*}", "1m")))/avg(q("avg:linux.mem.memtotal{host=*}", "1m")) * 100
	warn = $q < 20
	crit = $q < 10
}

alert linux.net {
	owner = kyle@stackoverflow.com
	template = generic
	$q = avg(q("avg:rate:linux.net.bytes{host=*,iface=*}", "5m")) * 8
	warn = $q > 2e8
	crit = $q > 3e8
}

alert linux.diskspace {
	owner = kyle@stackoverflow.com
	template = generic
	$q = avg(q("avg:linux.disk.fs.space_used{host=*,mount=*}", "5m"))/avg(q("avg:linux.disk.fs.space_total{host=*,mount=*}", "5m")) * 100
	warn = $q > 80
	crit = $q > 90
}

alert redis.fragmentation {
	$used_rss = avg(q("avg:redis.used_memory_rss{host=*,port=*}", "5m"))
	$frag = avg(q("avg:redis.mem_fragmentation_ratio{host=*,port=*}", "5m"))
	warn = $frag > 2 && $used_rss > 2e8
	crit = $frag > 5 && $used_rss > 2e8
}

alert linux.ds.forecast {
	owner = kyle@stackoverflow.com
	template = generic
	$filter = host=*,mount=*
	#Aggregating avg on opentsdb side will save the linear regression a lot of work
	$q = (forecastlr(q("avg:30m-avg:linux.disk.fs.space_free{$filter}", "1w"), 0) / 60 / 60)
	warn = $q > 0 && $q < 60
	crit = $q > 0 && $q < 30
}

alert linux.ds.forecast.ignore_shm {
	owner = kyle@stackoverflow.com
	template = generic
	$filter = host=*,mount=/dev/shm
	$q = (forecastlr(q("avg:linux.disk.fs.space_free{$filter}", "1w"), 0) / 60 / 60)
	warn = 0
	crit = 0
}